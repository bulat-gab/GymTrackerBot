@using GymTrackerBot.Domain.Interfaces
@using GymTrackerBot.Domain.Models
@inject IGymServiceStandalone GymService
@inject NavigationManager NavigationManager

<div class="card">
    <div class="card-header bg-light">
        <strong>Edit Exercise</strong>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label">Exercise</label>
            <input class="form-control" value="@Exercise.Name" disabled />
        </div>

        <div class="mb-3">
            <label class="form-label">Sets</label>
            <input type="number" class="form-control" @bind="Exercise.Sets" min="1" />
        </div>

        <div class="mb-3">
            <label class="form-label">Reps</label>
            <input type="number" class="form-control" @bind="Exercise.Reps" min="1" />
        </div>

        <div class="mb-3">
            <label class="form-label">Weight (kg)</label>
            <input type="number" class="form-control" @bind="Exercise.Weight" min="0" step="0.5" />
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            <button class="btn btn-danger" @onclick="DeleteExercise">Delete</button>
            <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public GymExercise Exercise { get; set; } = default!;
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnDeleted { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async Task SaveChanges()
    {
        await OnSaved.InvokeAsync();
    }

    private async Task DeleteExercise()
    {
        await OnDeleted.InvokeAsync();
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}