@page "/"
@inject IJSRuntime JSRuntime
@using GymTrackerBot.Domain.Interfaces
@using GymTrackerBot.Domain.Models
@inject IGymServiceStandalone GymService

<PageTitle>Home</PageTitle>

<h1>Welcome to House of Gains</h1>

@if (activeSession != null)
{
    <div class="alert alert-success">
        <h5>Active Session</h5>
        <p><strong>Type:</strong> @GetSessionTypeDisplay(activeSession.SessionType)</p>
        <p><strong>Started:</strong> @activeSession.StartTime.ToString("g")</p>
        <p><strong>Elapsed Time:</strong> @elapsed.ToString(@"hh\:mm\:ss")</p>

        <div class="d-flex gap-2">
            <button class="btn btn-success" @onclick="() => OpenFinishSessionDialog(activeSession.Id)">Finish Session</button>
            <button class="btn btn-outline-danger" @onclick="DiscardActiveSession">Discard</button>
        </div>
    </div>
    
    @if (filteredExercises.Any())
    {
        <div class="mt-3">
            <h5>Suggested Exercises</h5>
            <ul class="list-group">
                @foreach (var ex in filteredExercises)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @ex.Name
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => AddExerciseToSession(ex))">Add</button>
                    </li>
                }
            </ul>
        </div>
    }


}
else
{
    <div class="action-buttons mb-3">
        <button class="btn btn-primary" @onclick="OpenNewSessionDialog">Start New Session</button>
    </div>
}

<!-- New Session Modal -->
@if (showNewSessionDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Start New Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseNewSessionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="sessionNotes">Notes (optional):</label>
                        <textarea id="sessionNotes" class="form-control" @bind="newSessionNotes" rows="3"
                                  placeholder="What are you planning to work on today?"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="sessionType">Session Type:</label>
                        <select id="sessionType" class="form-select" @bind="@selectedSessionType">
                            @foreach (var type in Enum.GetValues<GymSessionType>())
                            {
                                if (type != GymSessionType.None)
                                {
                                    <option value="@type">@type.ToString()</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseNewSessionDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateNewSession">Start Session</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Finish Session Modal -->
@if (showFinishSessionDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Finish Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseFinishSessionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="finishNotes">Notes (optional):</label>
                        <textarea id="finishNotes" class="form-control" @bind="finishSessionNotes" rows="3"
                                  placeholder="How was your workout?"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFinishSessionDialog">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="FinishSession">Finish Session</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private GymSession? activeSession;
    private bool showNewSessionDialog = false;
    private bool showFinishSessionDialog = false;

    private string? newSessionNotes;
    private string? finishSessionNotes;
    private GymSessionType selectedSessionType;
    private TimeSpan elapsed;
    private Timer? stopwatchTimer;

    
    [Inject] private HttpClient Http { get; set; }
    private List<ExerciseTemplate> allExercises = new();
    private List<ExerciseTemplate> filteredExercises = new();
    
    protected override async Task OnInitializedAsync()
    {
        var sessions = await GymService.GetSessionsAsync();
        activeSession = sessions.FirstOrDefault(s => !s.EndTime.HasValue);

        allExercises = await Http.GetFromJsonAsync<List<ExerciseTemplate>>("data/exercises.json") ?? new();

        if (activeSession != null)
        {
            StartStopwatch();

            filteredExercises = allExercises
                .Where(e => activeSession.SessionType.HasFlag(e.SessionType))
                .ToList();
        }
    }


    private async Task CreateNewSession()
    {
        var newSession = new GymSession
        {
            StartTime = DateTime.Now,
            Notes = newSessionNotes,
            SessionType = selectedSessionType
        };

        await GymService.CreateSessionAsync(newSession);
        CloseNewSessionDialog();

        activeSession = newSession;
        StartStopwatch();
        filteredExercises = allExercises
            .Where(e => newSession.SessionType.HasFlag(e.SessionType))
            .ToList();
    }

    private void StartStopwatch()
    {
        stopwatchTimer = new Timer(_ =>
        {
            if (activeSession != null)
            {
                elapsed = DateTime.Now - activeSession.StartTime;
                InvokeAsync(StateHasChanged);
            }
        }, null, 0, 1000);
    }

    private void StopStopwatch()
    {
        stopwatchTimer?.Dispose();
        stopwatchTimer = null;
    }

    private void OpenNewSessionDialog()
    {
        newSessionNotes = null;
        selectedSessionType = GymSessionType.None;
        showNewSessionDialog = true;
    }

    private void CloseNewSessionDialog()
    {
        showNewSessionDialog = false;
    }

    private void OpenFinishSessionDialog(int id)
    {
        selectedSessionId = id;
        finishSessionNotes = null;
        showFinishSessionDialog = true;
    }

    private void CloseFinishSessionDialog()
    {
        showFinishSessionDialog = false;
    }

    private async Task DiscardActiveSession()
    {
        if (activeSession != null)
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to discard this session?");
            if (confirm)
            {
                await GymService.DeleteSessionAsync(activeSession.Id);
                activeSession = null;
                StopStopwatch();
            }
        }
    }

    
    private int selectedSessionId;

    private async Task FinishSession()
    {
        if (activeSession != null)
        {
            await GymService.FinishSessionAsync(activeSession.Id, DateTime.Now, finishSessionNotes);
            activeSession = null;
            StopStopwatch();
            CloseFinishSessionDialog();
        }
    }

    private string GetSessionTypeDisplay(GymSessionType types)
    {
        if (types == GymSessionType.None) return "-";
        return string.Join(", ",
            Enum.GetValues<GymSessionType>()
                .Where(t => t != GymSessionType.None && types.HasFlag(t))
                .Select(t => t.ToString()));
    }
    
    private async Task AddExerciseToSession(ExerciseTemplate template)
    {
        if (activeSession != null)
        {
            var exercise = new GymExercise
            {
                Name = template.Name,
                Sets = template.DefaultSets,
                Reps = template.DefaultReps
            };

            activeSession.Exercises.Add(exercise);
            await GymService.UpdateSessionAsync(activeSession); // Ensure this method exists
            StateHasChanged();
        }
    }
    
    private void FilterExercises()
    {
        if (activeSession != null)
        {
            filteredExercises = allExercises
                .Where(e => activeSession.SessionType.HasFlag(e.SessionType))
                .ToList();
        }
    }

}
