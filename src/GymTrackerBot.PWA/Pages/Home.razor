@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Text.Json
@using GymTrackerBot.Domain.Interfaces
@using GymTrackerBot.Domain.Models
@inject IGymServiceStandalone GymService
@using GymTrackerBot.PWA.Components 

<PageTitle>Home</PageTitle>

<h1>Welcome to House of Gains</h1>

@if (activeSession != null)
{
    <div class="alert alert-success">
        <h5>Active Session</h5>
        <p><strong>Type:</strong> @GetSessionTypeDisplay(activeSession.SessionType)</p>
        <p><strong>Started:</strong> @activeSession.StartTime.ToString("g")</p>
        <p><strong>Elapsed Time:</strong> @elapsed.ToString(@"hh\:mm\:ss")</p>

        <div class="d-flex gap-2">
            <button class="btn btn-success" @onclick="() => OpenFinishSessionDialog(activeSession.Id)">Finish Session</button>
            <button class="btn btn-outline-danger" @onclick="DiscardActiveSession">Discard</button>
        </div>
    </div>

    @if (activeSession.Exercises.Any())
    {
        <div class="mt-4">
            <h5>Exercises</h5>
            <ul class="list-group">
                @foreach (var ex in activeSession.Exercises)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center"
                        @onclick="@(() => OpenEditor(ex))"
                        style="cursor: pointer;">
                        <div>
                            <strong>@ex.Name</strong><br />
                            <small>@ex.Sets sets × @ex.Reps reps. Weight: @ex.Weight kg</small>
                        </div>
                    </li>
                }
            </ul>
            @if (showEditor && selectedExercise != null)
            {
                <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Edit Exercise</h5>
                                <button type="button" class="btn-close" @onclick="CancelEdit" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <ExerciseEditor Exercise="@selectedExercise"
                                                OnSaved="@SaveExerciseChanges"
                                                OnDeleted="@DeleteExercise"
                                                OnCancel="@CancelEdit" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="mt-3 text-muted">No exercises added yet.</p>
    }

    <button class="btn btn-primary mt-3" @onclick="OpenAddExerciseDialog">Add Exercise</button>
}
else
{
    <div class="action-buttons mb-3">
        <button class="btn btn-primary" @onclick="OpenNewSessionDialog">Start New Session</button>
    </div>
}

@if (showNewSessionDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Start New Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseNewSessionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="sessionType" class="form-label">Session Type</label>
                        <select id="sessionType" class="form-select" @bind="selectedSessionType">
                            @foreach (var type in Enum.GetValues<GymSessionType>())
                            {
                                if (type != GymSessionType.None)
                                {
                                    <option value="@type">@type.ToString()</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="sessionNotes" class="form-label">Notes (optional)</label>
                        <textarea id="sessionNotes" class="form-control" @bind="newSessionNotes" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseNewSessionDialog">Cancel</button>
                    <button class="btn btn-primary" @onclick="CreateNewSession">Start Session</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showAddExerciseDialog)
{
    <div class="modal fade show" style="display:block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Exercise</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddExerciseDialog"></button>
                </div>
                <div class="modal-body">
                    @if (allExercises.Any())
                    {
                        var matching = allExercises
                            .Where(e => activeSession!.SessionType.HasFlag(e.SessionType))
                            .OrderBy(e => e.Name)
                            .ToList();

                        var other = allExercises
                            .Where(e => !activeSession!.SessionType.HasFlag(e.SessionType))
                            .OrderBy(e => e.Name)
                            .ToList();

                        if (matching.Any())
                        {
                            <h6 class="text-success">Matching Exercises</h6>
                            <ul class="list-group mb-3">
                                @foreach (var exercise in matching)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @exercise.Name
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => AddExerciseToSession(exercise)">Add</button>
                                    </li>
                                }
                            </ul>
                        }

                        if (other.Any())
                        {
                            <h6 class="text-muted">Other Exercises</h6>
                            <ul class="list-group">
                                @foreach (var exercise in other)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @exercise.Name
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => AddExerciseToSession(exercise)">Add</button>
                                    </li>
                                }
                            </ul>
                        }
                    }
                    else
                    {
                        <p>No exercises available.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddExerciseDialog">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showFinishSessionDialog)
{
    <div class="modal fade show" style="display:block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Finish Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseFinishSessionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="finishNotes" class="form-label">Notes (optional)</label>
                        <textarea id="finishNotes" class="form-control" @bind="finishSessionNotes" rows="3"
                                  placeholder="How was your workout?"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseFinishSessionDialog">Cancel</button>
                    <button class="btn btn-success" @onclick="FinishSession">Finish Session</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private GymSession? activeSession;
    private List<GymExerciseTemplate> allExercises = new();
    private TimeSpan elapsed;
    private Timer? stopwatchTimer;

    private bool showAddExerciseDialog = false;
    private bool showNewSessionDialog = false;
    private bool showFinishSessionDialog = false;
    private int selectedSessionId;
    private string? finishSessionNotes;

    private string? newSessionNotes;
    private GymSessionType selectedSessionType;
    
    private GymExercise? selectedExercise;
    private bool showEditor = false;

    protected override async Task OnInitializedAsync()
    {
        var sessions = await GymService.GetSessionsAsync();
        activeSession = sessions.FirstOrDefault(s => !s.EndTime.HasValue);
        allExercises = await LoadAllExerciseTemplatesAsync();

        if (activeSession != null)
        {
            StartStopwatch();
        }
    }

    private async Task CreateNewSession()
    {
        var newSession = new GymSession
        {
            StartTime = DateTime.Now,
            SessionType = selectedSessionType,
            Notes = newSessionNotes,
            Exercises = new List<GymExercise>()
        };

        await GymService.CreateSessionAsync(newSession);
        activeSession = newSession;
        showNewSessionDialog = false;
        StartStopwatch();
        StateHasChanged();
    }

    private void OpenNewSessionDialog() => showNewSessionDialog = true;
    private void CloseNewSessionDialog() => showNewSessionDialog = false;

    private void OpenFinishSessionDialog(int id)
    {
        selectedSessionId = id;
        finishSessionNotes = null;
        showFinishSessionDialog = true;
    }

    private void OpenAddExerciseDialog() => showAddExerciseDialog = true;
    private void CloseAddExerciseDialog() => showAddExerciseDialog = false;

    private void StartStopwatch()
    {
        stopwatchTimer = new Timer(_ =>
        {
            if (activeSession != null)
            {
                elapsed = DateTime.Now - activeSession.StartTime;
                InvokeAsync(StateHasChanged);
            }
        }, null, 0, 1000);
    }

    private void StopStopwatch()
    {
        stopwatchTimer?.Dispose();
        stopwatchTimer = null;
    }

    private async Task<List<GymExerciseTemplate>> LoadAllExerciseTemplatesAsync()
    {
        var categories = new[] { "arms", "back", "chest", "leg", "shoulders" };
        var all = new List<GymExerciseTemplate>();

        foreach (var category in categories)
        {
            try
            {
                var filePath = $"data/exercises.{category}.json";
                var templates = await Http.GetFromJsonAsync<List<GymExerciseTemplate>>(filePath);
                if (templates != null) all.AddRange(templates);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load {category} exercises: {ex.Message}");
            }
        }

        return all;
    }

    private async Task AddExerciseToSession(GymExerciseTemplate template)
    {
        if (activeSession != null && !activeSession.Exercises.Any(e => e.Name == template.Name))
        {
            var exercise = new GymExercise
            {
                Name = template.Name,
                Sets = template.DefaultSets,
                Reps = template.DefaultReps
            };

            activeSession.Exercises.Add(exercise);
            await GymService.UpdateSessionAsync(activeSession);
            StateHasChanged();
        }
    }

    private async Task DiscardActiveSession()
    {
        if (activeSession != null)
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to discard this session?");
            if (confirm)
            {
                await GymService.DeleteSessionAsync(activeSession.Id);
                activeSession = null;
                StopStopwatch();
                StateHasChanged();
            }
        }
    }

    private string GetSessionTypeDisplay(GymSessionType types)
    {
        if (types == GymSessionType.None) return "-";
        return string.Join(", ", Enum.GetValues<GymSessionType>().Where(t => t != GymSessionType.None && types.HasFlag(t)));
    }
    
    private void CloseFinishSessionDialog() => showFinishSessionDialog = false;

    private async Task FinishSession()
    {
        if (activeSession != null)
        {
            activeSession.EndTime = DateTime.Now;
            if (!string.IsNullOrWhiteSpace(finishSessionNotes))
            {
                activeSession.Notes = string.IsNullOrWhiteSpace(activeSession.Notes)
                    ? finishSessionNotes
                    : $"{activeSession.Notes}\n\n{finishSessionNotes}";
            }

            await GymService.UpdateSessionAsync(activeSession);
            StopStopwatch();
            showFinishSessionDialog = false;
            activeSession = null;
            StateHasChanged();
        }
    }

    private void OpenEditor(GymExercise ex)
    {
        selectedExercise = ex;
        showEditor = true;
    }

    private async Task SaveExerciseChanges()
    {
        await GymService.UpdateSessionAsync(activeSession!); // Save updated session with changed exercise
        showEditor = false;
        StateHasChanged();
    }

    private async Task DeleteExercise()
    {
        if (selectedExercise != null)
        {
            activeSession!.Exercises.Remove(selectedExercise);
            await GymService.UpdateSessionAsync(activeSession);
            showEditor = false;
            StateHasChanged();
        }
    }

    private void CancelEdit() => showEditor = false;
}
