@page "/sessions/{Id:int}"
@using GymTrackerBot.Domain.Models
@using GymTrackerBot.Domain.Interfaces
@inject IGymServiceStandalone GymService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Gym Session Details</h3>
    <button class="btn btn-outline-secondary" @onclick="GoBack">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Sessions
    </button>
</div>

@if (session == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (isEditing)
{
    <div class="card">
        <div class="card-header bg-primary text-white">
            Edit Session
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Start Time</label>
                    <input type="datetime-local" class="form-control" @bind="editSession.StartTime" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">End Time</label>
                    <input type="datetime-local" class="form-control" @bind="editSession.EndTime" />
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Notes</label>
                <textarea class="form-control" rows="5" @bind="editSession.Notes" placeholder="Enter session notes here..."></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Session Type(s)</label>
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var type in Enum.GetValues<GymSessionType>())
                    {
                        if (type == GymSessionType.None) continue;

                        <label class="form-check-label me-3">
                            <input class="form-check-input me-1"
                                   type="checkbox"
                                   checked="@editSession!.SessionType.HasFlag(type)"
                                   @onchange="e => ToggleEditSessionType(type, (bool)e.Value!)" />
                            @type.ToString()
                        </label>
                    }
                </div>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-outline-secondary" @onclick="CancelEdit">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveSession">Save Changes</button>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fs-5">Session #@session.Id</span>
                <div>
                    <button class="btn btn-primary btn-sm" @onclick="StartEdit">
                        <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                    </button>
                    @if (!session.EndTime.HasValue)
                    {
                        <button class="btn btn-success btn-sm ms-2" @onclick="OpenFinishDialog">
                            <span class="oi oi-check" aria-hidden="true"></span> Finish Session
                        </button>
                    }
                    <button class="btn btn-danger btn-sm ms-2" @onclick="DeleteSession">
                        <span class="oi oi-trash" aria-hidden="true"></span> Delete
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Start Time:</dt>
                        <dd class="col-sm-8">@session.StartTime.ToString("f")</dd>

                        <dt class="col-sm-4">End Time:</dt>
                        <dd class="col-sm-8">
                            @if (session.EndTime.HasValue)
                            {
                                @session.EndTime.Value.ToString("f")
                            }
                            else
                            {
                                <span class="badge bg-success">Active</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Duration:</dt>
                        <dd class="col-sm-8">
                            @if (session.EndTime.HasValue)
                            {
                                var duration = session.EndTime.Value - session.StartTime;
                                @duration.ToString(@"hh\:mm\:ss")
                            }
                            else
                            {
                                var duration = DateTime.Now - session.StartTime;
                                <span title="Current duration (ongoing)">@duration.ToString(@"hh\:mm\:ss")</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Types:</dt>
                        <dd class="col-sm-8">@GetSessionTypeDisplay(session.SessionType)</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <span>Session Status</span>
                        </div>
                        <div class="card-body">
                            @if (session.EndTime.HasValue)
                            {
                                <div class="d-flex align-items-center">
                                    <span class="badge bg-secondary me-2">Completed</span>
                                    <span>Finished on @session.EndTime.Value.ToString("D")</span>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-center">
                                    <span class="badge bg-success me-2">Active</span>
                                    <span>Started @((DateTime.Now - session.StartTime).TotalHours < 24
                                                          ? $"{(int)(DateTime.Now - session.StartTime).TotalHours}h {(DateTime.Now - session.StartTime).Minutes}m ago"
                                                          : $"on {session.StartTime.ToString("D")}")</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <h5>Notes</h5>
                <div class="card bg-light">
                    <div class="card-body">
                        @if (string.IsNullOrEmpty(session.Notes))
                        {
                            <em>No notes for this session.</em>
                        }
                        else
                        {
                            <pre class="mb-0" style="white-space: pre-wrap;">@session.Notes</pre>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (showFinishDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Finish Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseFinishDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="finishNotes">Notes (optional):</label>
                        <textarea id="finishNotes" class="form-control" @bind="finishNotes" rows="3"
                                  placeholder="How was your workout?"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFinishDialog">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="FinishSession">Finish Session</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this session? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private GymSession? session;
    private GymSession? editSession;
    private bool isEditing = false;
    private bool showFinishDialog = false;
    private bool showDeleteConfirmation = false;
    private string? finishNotes;

    protected override async Task OnInitializedAsync()
    {
        await LoadSession();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSession();
    }

    private async Task LoadSession()
    {
        session = await GymService.GetSessionAsync(Id);
        if (session == null)
        {
            NavigationManager.NavigateTo("sessions");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "sessions");
    }

    private void StartEdit()
    {
        editSession = new GymSession
        {
            Id = session!.Id,
            StartTime = session.StartTime,
            EndTime = session.EndTime,
            Notes = session.Notes,
            SessionType = session.SessionType
        };
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
        editSession = null;
    }

    private async Task SaveSession()
    {
        if (editSession != null)
        {
            await GymService.UpdateSessionAsync(editSession);
            isEditing = false;
            await LoadSession();
        }
    }

    private void OpenFinishDialog()
    {
        finishNotes = null;
        showFinishDialog = true;
    }

    private void CloseFinishDialog()
    {
        showFinishDialog = false;
    }

    private async Task FinishSession()
    {
        await GymService.FinishSessionAsync(Id, DateTime.Now, finishNotes);
        showFinishDialog = false;
        await LoadSession();
    }

    private void DeleteSession()
    {
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    private async Task ConfirmDelete()
    {
        if (await GymService.DeleteSessionAsync(Id))
        {
            NavigationManager.NavigateTo("/sessions");
        }
    }

    private string GetSessionTypeDisplay(GymSessionType types)
    {
        if (types == GymSessionType.None) return "-";
        return string.Join(", ",
            Enum.GetValues<GymSessionType>()
                .Where(t => t != GymSessionType.None && types.HasFlag(t))
                .Select(t => t.ToString()));
    }

    private void ToggleEditSessionType(GymSessionType type, bool isChecked)
    {
        if (editSession == null) return;

        if (isChecked)
            editSession.SessionType |= type;
        else
            editSession.SessionType &= ~type;
    }
}
