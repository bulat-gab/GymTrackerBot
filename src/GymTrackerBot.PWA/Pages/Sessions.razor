@page "/sessions"
@using GymTrackerBot.Domain.Models
@using GymTrackerBot.Domain.Interfaces
@using GymTrackerBot.Infrastructure
@inject IGymServiceStandalone GymService
@inject NavigationManager NavigationManager

<h3>Gym Sessions</h3>

@if (sessions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    

    @if (!sessions.Any())
    {
        <p>No gym sessions found. Click "Start New Session" to create one!</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th class="d-sm-none">Start</th>
                <th class="d-none d-sm-table-cell">Start Time</th>
                <th class="d-none d-sm-table-cell">End Time</th>
                <th>Duration</th>
                <th>Types</th>
                <th class="d-none d-sm-table-cell">Notes</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var session in sessions)
            {
                <tr class="@(session.EndTime.HasValue ? "" : "table-success")">

                    <!-- Mobile: short format -->
                    <td class="d-sm-none">@UIHelper.GetShortDateTime(session.StartTime)</td>

                    <!-- Desktop: full format -->
                    <td class="d-none d-sm-table-cell">@UIHelper.GetLongDateTime(session.StartTime)</td>

                    <!-- End Time (nullable): long format -->
                    <td class="d-none d-sm-table-cell">@UIHelper.GetLongDateTime(session.EndTime)</td>

                    <td>
                        @(session.Duration.HasValue
                            ? $"{(int)session.Duration.Value.TotalMinutes} mins"
                            : (MarkupString)"<span class='badge bg-success'>Active</span>")
                    </td>

                    <td>@UIHelper.GetSessionTypeDisplay(session.SessionType)</td>
                    <td class="d-none d-sm-table-cell">
                        @if (!string.IsNullOrEmpty(session.Notes))
                        {
                            <span class="text-truncate d-inline-block" style="max-width: 150px;" title="@session.Notes">
                                @session.Notes
                            </span>
                        }
                    </td>


                    <td class="d-flex flex-wrap justify-content-center gap-2">
                        <button class="btn btn-info btn-sm" @onclick="() => ViewSession(session.Id)">View</button>
                        @* @if (!session.EndTime.HasValue) *@
                        @* { *@
                        @*     <button class="btn btn-success btn-sm" @onclick="() => OpenFinishSessionDialog(session.Id)">Finish</button> *@
                        @* } *@
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(session.Id)">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        
        @if (showConfirmDialog)
        {
            <div class="modal-backdrop"></div>
            <div class="modal show" tabindex="-1" style="display: block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Deletion</h5>
                            <button type="button" class="btn-close" @onclick="CloseConfirmDialog"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this session?</p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseConfirmDialog">Cancel</button>
                            <button class="btn btn-danger" @onclick="DeleteSessionImmediately">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}


@code {
    private List<GymSession>? sessions;
    
    private bool showConfirmDialog = false; // Controls the visibility of the confirmation popup
    private int? sessionIdToDelete = null; // Stores the ID of the session to delete

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        sessions = await GymService.GetSessionsAsync();
    }

    private void ViewSession(int id)
    {
        NavigationManager.NavigateTo($"sessions/{id}");
    }

    private async Task DeleteSession(int id)
    {
        if (await GymService.DeleteSessionAsync(id))
        {
            await LoadSessions();
        }
    }
    
    // Trigger the confirmation dialog
    private void ConfirmDelete(int id)
    {
        sessionIdToDelete = id; // Save the session ID for deletion
        showConfirmDialog = true; // Show the confirmation dialog
    }

    // Close the confirmation dialog without deleting
    private void CloseConfirmDialog()
    {
        sessionIdToDelete = null;
        showConfirmDialog = false;
    }
    
    // Delete the session when confirmed
    private async Task DeleteSessionImmediately()
    {
        if (sessionIdToDelete.HasValue)
        {
            if (await GymService.DeleteSessionAsync(sessionIdToDelete.Value))
            {
                await LoadSessions();
            }
        }
        CloseConfirmDialog(); // Close the dialog when finished
    }


}
