@page "/sessions"
@using GymTrackerBot.Domain.Models
@using GymTrackerBot.Domain.Interfaces
@inject IGymServiceStandalone GymService
@inject NavigationManager NavigationManager

<h3>Gym Sessions</h3>

@if (sessions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    

    @if (!sessions.Any())
    {
        <p>No gym sessions found. Click "Start New Session" to create one!</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Start Time</th>
                <th class="d-none d-sm-table-cell">End Time</th>
                <th>Duration</th>
                <th>Types</th>
                <th class="d-none d-sm-table-cell">Notes</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var session in sessions)
            {
                <tr class="@(session.EndTime.HasValue ? "" : "table-success")">
                    <td>@session.StartTime.ToString("g")</td>
                    <td class="d-none d-sm-table-cell">@(session.EndTime.HasValue ? session.EndTime.Value.ToString("g") : "-")</td>
                    <td>
                        @if (session.EndTime.HasValue)
                        {
                            var duration = session.EndTime.Value - session.StartTime;
                            @duration.ToString(@"hh\:mm")
                        }
                        else
                        {
                            <span class="badge bg-success">Active</span>
                        }
                    </td>
                    <td>@GetSessionTypeDisplay(session.SessionType)</td>
                    <td class="d-none d-sm-table-cell">
                        @if (!string.IsNullOrEmpty(session.Notes))
                        {
                            <span class="text-truncate d-inline-block" style="max-width: 150px;" title="@session.Notes">
                                @session.Notes
                            </span>
                        }
                    </td>


                    <td class="d-flex flex-wrap justify-content-center gap-2">
                        <button class="btn btn-info btn-sm" @onclick="() => ViewSession(session.Id)">View</button>
                        @* @if (!session.EndTime.HasValue) *@
                        @* { *@
                        @*     <button class="btn btn-success btn-sm" @onclick="() => OpenFinishSessionDialog(session.Id)">Finish</button> *@
                        @* } *@
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteSession(session.Id)">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}





@code {
    private List<GymSession>? sessions;



    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        sessions = await GymService.GetSessionsAsync();
    }

    private void ViewSession(int id)
    {
        NavigationManager.NavigateTo($"session/{id}");
    }

    private async Task DeleteSession(int id)
    {
        if (await GymService.DeleteSessionAsync(id))
        {
            await LoadSessions();
        }
    }

    private string GetSessionTypeDisplay(GymSessionType types)
    {
        if (types == GymSessionType.None) return "-";
        return string.Join(", ",
            Enum.GetValues<GymSessionType>()
                .Where(t => t != GymSessionType.None && types.HasFlag(t))
                .Select(t => t.ToString()));
    }

}
