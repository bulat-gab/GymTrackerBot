@page "/sessions"
@using GymTrackerBot.Domain.Models
@using GymTrackerBot.Domain.Interfaces
@inject IGymServiceStandalone GymService
@inject NavigationManager NavigationManager

<h3>Gym Sessions</h3>

@if (sessions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="action-buttons mb-3">
        @if (hasActiveSession)
        {
            <button class="btn btn-primary" disabled title="Cannot start a new session while another is active">
                Start New Session
            </button>
            <div class="text-warning mt-2">
                <small><i class="oi oi-warning"></i> You have an active session. Please finish it before starting a new one.</small>
            </div>
        }
        else
        {
            <button class="btn btn-primary" @onclick="OpenNewSessionDialog">Start New Session</button>
        }
    </div>

    @if (!sessions.Any())
    {
        <p>No gym sessions found. Click "Start New Session" to create one!</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Duration</th>
                <th>Notes</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var session in sessions)
            {
                <tr class="@(session.EndTime.HasValue ? "" : "table-success")">
                    <td>@session.StartTime.ToString("g")</td>
                    <td>@(session.EndTime.HasValue ? session.EndTime.Value.ToString("g") : "-")</td>
                    <td>
                        @if (session.EndTime.HasValue)
                        {
                            var duration = session.EndTime.Value - session.StartTime;
                            @duration.ToString(@"hh\:mm")
                        }
                        else
                        {
                            <span class="badge bg-success">Active</span>
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(session.Notes))
                        {
                            <span class="text-truncate d-inline-block" style="max-width: 150px;" title="@session.Notes">
                                    @session.Notes
                                </span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => ViewSession(session.Id)">View</button>
                        @if (!session.EndTime.HasValue)
                        {
                            <button class="btn btn-success btn-sm ms-1" @onclick="() => OpenFinishSessionDialog(session.Id)">Finish</button>
                        }
                        <button class="btn btn-danger btn-sm ms-1" @onclick="() => DeleteSession(session.Id)">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

<!-- New Session Modal -->
@if (showNewSessionDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Start New Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseNewSessionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="sessionNotes">Notes (optional):</label>
                        <textarea id="sessionNotes" class="form-control" @bind="newSessionNotes" rows="3"
                                  placeholder="What are you planning to work on today?"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseNewSessionDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateNewSession">Start Session</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Finish Session Modal -->
@if (showFinishSessionDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Finish Session</h5>
                    <button type="button" class="btn-close" @onclick="CloseFinishSessionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="finishNotes">Notes (optional):</label>
                        <textarea id="finishNotes" class="form-control" @bind="finishSessionNotes" rows="3"
                                  placeholder="How was your workout?"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFinishSessionDialog">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="FinishSession">Finish Session</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<GymSession>? sessions;
    private bool showNewSessionDialog = false;
    private bool showFinishSessionDialog = false;
    private string? newSessionNotes;
    private string? finishSessionNotes;
    private int selectedSessionId;
    private bool hasActiveSession = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        sessions = await GymService.GetSessionsAsync();

        // Check if there's any active session
        hasActiveSession = sessions?.Any(s => !s.EndTime.HasValue) ?? false;
    }

    // New Session Dialog methods
    private void OpenNewSessionDialog()
    {
        if (hasActiveSession)
            return;

        newSessionNotes = null;
        showNewSessionDialog = true;
    }

    private void CloseNewSessionDialog()
    {
        showNewSessionDialog = false;
    }

    private async Task CreateNewSession()
    {
        // Double-check we don't have active sessions
        if (hasActiveSession)
        {
            CloseNewSessionDialog();
            return;
        }

        var newSession = new GymSession
        {
            StartTime = DateTime.Now,
            Notes = newSessionNotes
        };

        await GymService.CreateSessionAsync(newSession);
        CloseNewSessionDialog();
        await LoadSessions();
    }

    // Finish Session Dialog methods
    private void OpenFinishSessionDialog(int id)
    {
        selectedSessionId = id;
        finishSessionNotes = null;
        showFinishSessionDialog = true;
    }

    private void CloseFinishSessionDialog()
    {
        showFinishSessionDialog = false;
    }

    private async Task FinishSession()
    {
        await GymService.FinishSessionAsync(selectedSessionId, DateTime.Now, finishSessionNotes);
        CloseFinishSessionDialog();
        await LoadSessions();
    }

    private void ViewSession(int id)
    {
        NavigationManager.NavigateTo($"session/{id}");
    }

    private async Task DeleteSession(int id)
    {
        if (await GymService.DeleteSessionAsync(id))
        {
            await LoadSessions();
        }
    }
}